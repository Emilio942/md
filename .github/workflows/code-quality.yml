name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety pytest pytest-cov
        pip install -r requirements.txt
        pip install -e .

    - name: Code formatting check with Black
      run: |
        black --check --diff proteinMD/
        echo "Black formatting check completed"

    - name: Import sorting check with isort
      run: |
        isort --check-only --diff proteinMD/
        echo "Import sorting check completed"

    - name: Linting with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 proteinMD/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 proteinMD/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "Flake8 linting completed"

    - name: Type checking with mypy
      run: |
        mypy proteinMD/ --ignore-missing-imports --show-error-codes
        echo "Type checking completed"
      continue-on-error: true  # Type hints are work in progress

    - name: Security check with bandit
      run: |
        bandit -r proteinMD/ -f json -o bandit-report.json
        bandit -r proteinMD/ --skip B101,B601
        echo "Security scan completed"
      continue-on-error: true

    - name: Dependency security check with safety
      run: |
        safety check --json --output safety-report.json
        safety check
        echo "Dependency security check completed"
      continue-on-error: true

    - name: Run unit tests with coverage
      run: |
        pytest proteinMD/tests/ --cov=proteinMD --cov-report=xml --cov-report=html --cov-report=term
        echo "Unit tests with coverage completed"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: htmlcov/

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

  docstring-coverage:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install docstring coverage tool
      run: |
        pip install docstring-coverage

    - name: Check docstring coverage
      run: |
        docstring-coverage proteinMD/ --badge=coverage --percentage-to-fail=50
        echo "Docstring coverage check completed"
      continue-on-error: true

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install complexity analysis tools
      run: |
        pip install radon xenon

    - name: Analyze cyclomatic complexity
      run: |
        radon cc proteinMD/ -a -nb
        echo "Cyclomatic complexity analysis completed"

    - name: Analyze maintainability index
      run: |
        radon mi proteinMD/ -nb
        echo "Maintainability index analysis completed"

    - name: Check complexity with xenon
      run: |
        xenon --max-average A --max-modules A --max-absolute B proteinMD/
        echo "Xenon complexity check completed"
      continue-on-error: true
