#!/usr/bin/env python3
"""
PCA Integration Demonstration Script

This script demonstrates the integration of Principal Component Analysis (PCA)
into the ProteinMD GUI system.

Features demonstrated:
- PCA analysis controls in the GUI
- Post-simulation PCA analysis
- PCA parameter configuration
- Results visualization and export

Author: ProteinMD Development Team
Date: June 16, 2025
"""

import os
import sys
import tempfile
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

def demo_pca_gui_integration():
    """Demonstrate PCA integration in the GUI."""
    print("üß¨ ProteinMD PCA-GUI Integration Demonstration")
    print("=" * 60)
    
    try:
        # Test PCA analysis module
        print("\n1. Testing PCA Analysis Module...")
        from proteinMD.analysis.pca import PCAAnalyzer, create_test_trajectory, perform_pca_analysis
        
        # Create test data
        trajectory = create_test_trajectory(n_frames=100, n_atoms=50)
        print(f"‚úÖ Created test trajectory: {trajectory.shape}")
        
        # Perform PCA analysis
        analyzer = PCAAnalyzer(atom_selection="CA")
        results = analyzer.fit_transform(trajectory, n_components=10)
        
        print(f"‚úÖ PCA analysis completed:")
        print(f"   - Components: {results.n_components}")
        print(f"   - Trajectory length: {results.trajectory_length}")
        print(f"   - First 5 PCs explain: {results.get_explained_variance(5):.1f}% variance")
        
        # Test clustering
        clustering_results = analyzer.cluster_conformations(n_clusters=3)
        print(f"‚úÖ Clustering completed:")
        print(f"   - Number of clusters: {clustering_results.n_clusters}")
        print(f"   - Silhouette score: {clustering_results.silhouette_score:.3f}")
        
        # Test visualization
        import tempfile
        with tempfile.TemporaryDirectory() as temp_dir:
            # Generate plots
            analyzer.plot_eigenvalue_spectrum(save_path=f"{temp_dir}/eigenvalues.png")
            analyzer.plot_pc_projections(save_path=f"{temp_dir}/projections.png")
            analyzer.plot_cluster_analysis(save_path=f"{temp_dir}/clusters.png")
            
            # Export results
            output_path = analyzer.export_results(output_dir=temp_dir)
            exported_files = list(Path(temp_dir).glob("*"))
            
            print(f"‚úÖ Visualization and export completed:")
            print(f"   - Output directory: {output_path}")
            print(f"   - Files generated: {len(exported_files)}")
        
    except ImportError as e:
        print(f"‚ùå PCA module not available: {e}")
        return False
    except Exception as e:
        print(f"‚ùå PCA analysis failed: {e}")
        return False
    
    # Test GUI integration
    print("\n2. Testing GUI Integration...")
    try:
        from proteinMD.gui.main_window import ProteinMDGUI
        import tkinter as tk
        
        # Create a temporary root window (don't show it)
        root = tk.Tk()
        root.withdraw()  # Hide the window
        
        # Create GUI instance
        app = ProteinMDGUI()
        
        # Test parameter collection
        params = app.get_simulation_parameters()
        pca_params = params.get('analysis', {}).get('pca', {})
        
        print(f"‚úÖ GUI PCA integration working:")
        print(f"   - PCA enabled: {pca_params.get('enabled', False)}")
        print(f"   - Atom selection: {pca_params.get('atom_selection', 'N/A')}")
        print(f"   - Components: {pca_params.get('n_components', 'N/A')}")
        print(f"   - Clustering: {pca_params.get('clustering', False)}")
        print(f"   - Number of clusters: {pca_params.get('n_clusters', 'N/A')}")
        
        # Test parameter setting
        app.pca_var.set(True)
        app.pca_atom_selection_var.set("backbone")
        app.pca_n_components_var.set("15")
        app.pca_clustering_var.set(True)
        app.pca_n_clusters_var.set("5")
        
        # Check updated parameters
        updated_params = app.get_simulation_parameters()
        updated_pca_params = updated_params.get('analysis', {}).get('pca', {})
        
        print(f"‚úÖ Parameter updates working:")
        print(f"   - Updated atom selection: {updated_pca_params.get('atom_selection')}")
        print(f"   - Updated components: {updated_pca_params.get('n_components')}")
        print(f"   - Updated clusters: {updated_pca_params.get('n_clusters')}")
        
        # Clean up
        root.destroy()
        
    except ImportError as e:
        print(f"‚ùå GUI integration test failed: {e}")
        return False
    except Exception as e:
        print(f"‚ùå GUI integration error: {e}")
        return False
    
    # Test configuration save/load
    print("\n3. Testing Configuration Management...")
    try:
        import json
        import tempfile
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            # Create test configuration with PCA parameters
            test_config = {
                'simulation': {
                    'temperature': 300.0,
                    'timestep': 0.002,
                    'n_steps': 10000
                },
                'analysis': {
                    'pca': {
                        'enabled': True,
                        'atom_selection': 'CA',
                        'n_components': 20,
                        'clustering': True,
                        'n_clusters': 'auto'
                    }
                }
            }
            
            json.dump(test_config, f, indent=2)
            config_file = f.name
        
        # Test loading configuration
        with open(config_file, 'r') as f:
            loaded_config = json.load(f)
        
        pca_config = loaded_config.get('analysis', {}).get('pca', {})
        print(f"‚úÖ Configuration management working:")
        print(f"   - PCA config saved and loaded successfully")
        print(f"   - Atom selection: {pca_config.get('atom_selection')}")
        print(f"   - Components: {pca_config.get('n_components')}")
        print(f"   - Clustering enabled: {pca_config.get('clustering')}")
        
        # Clean up
        os.unlink(config_file)
        
    except Exception as e:
        print(f"‚ùå Configuration management failed: {e}")
        return False
    
    print("\n4. Integration Status Summary:")
    print("‚úÖ PCA analysis module: Fully implemented")
    print("‚úÖ GUI controls: Integrated with parameter forms")
    print("‚úÖ Post-simulation analysis: Workflow implemented")
    print("‚úÖ Configuration management: PCA parameters supported")
    print("‚úÖ Visualization: Plots and exports working")
    print("‚úÖ Clustering: Conformational analysis integrated")
    
    print("\nüéØ PCA Integration Features:")
    print("‚Ä¢ PCA analysis checkbox in GUI analysis section")
    print("‚Ä¢ Atom selection dropdown (CA, backbone, all)")
    print("‚Ä¢ Configurable number of components")
    print("‚Ä¢ Conformational clustering toggle")
    print("‚Ä¢ Automatic or manual cluster count selection")
    print("‚Ä¢ Post-simulation analysis workflow")
    print("‚Ä¢ Results export and visualization")
    print("‚Ä¢ Template and configuration support")
    
    print("\nüéâ PCA-GUI Integration: COMPLETE!")
    print("Task 13.1 now fully integrated with the user interface.")
    
    return True

def demo_workflow_example():
    """Show an example workflow using the integrated system."""
    print("\n" + "=" * 60)
    print("üìã Example PCA Analysis Workflow")
    print("=" * 60)
    
    print("\n1. User Interface Steps:")
    print("   a) Load PDB file via drag & drop")
    print("   b) Navigate to Parameters tab")
    print("   c) Scroll to Analysis section")
    print("   d) Enable 'Principal Component Analysis (PCA)'")
    print("   e) Configure PCA settings:")
    print("      - Atom selection: CA (for backbone dynamics)")
    print("      - PCA components: 20 (captures main motions)")
    print("      - Enable conformational clustering")
    print("      - Clusters: auto (optimal number)")
    print("   f) Start simulation")
    
    print("\n2. Post-Simulation Analysis:")
    print("   ‚Ä¢ PCA analysis automatically runs after simulation")
    print("   ‚Ä¢ Progress shown in simulation log")
    print("   ‚Ä¢ Results saved to output_directory/pca_analysis/")
    
    print("\n3. Generated Output Files:")
    print("   üìä pca_eigenvalue_spectrum.png - Eigenvalue plot")
    print("   üìà pca_projections.png - PC1 vs PC2 projections")
    print("   üéØ pca_cluster_analysis.png - Cluster visualization")
    print("   üìÑ pca_summary.json - Analysis metadata")
    print("   üíæ eigenvalues.npy - Eigenvalues array")
    print("   üíæ eigenvectors.npy - Eigenvectors matrix")
    print("   üíæ projections.npy - Trajectory projections")
    print("   üíæ cluster_labels.npy - Cluster assignments")
    
    print("\n4. Interpretation:")
    print("   ‚Ä¢ First few PCs capture dominant protein motions")
    print("   ‚Ä¢ Eigenvalue spectrum shows motion importance")
    print("   ‚Ä¢ PC projections reveal conformational sampling")
    print("   ‚Ä¢ Clusters identify distinct conformational states")

if __name__ == "__main__":
    print("Starting PCA-GUI Integration Demonstration...")
    
    success = demo_pca_gui_integration()
    
    if success:
        demo_workflow_example()
        print("\n‚úÖ All demonstrations completed successfully!")
    else:
        print("\n‚ùå Some demonstrations failed. Check the error messages above.")
    
    print("\nPress Enter to exit...")
    input()
