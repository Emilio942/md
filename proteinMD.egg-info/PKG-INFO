Metadata-Version: 2.1
Name: proteinMD
Version: 0.1.0
Summary: A comprehensive molecular dynamics simulation system for protein behavior in cellular environments
Home-page: https://github.com/yourusername/proteinMD
Author: Emilio
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Chemistry
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.22.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: scipy>=1.8.0
Requires-Dist: tqdm>=4.62.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=3.0.0; extra == "dev"
Requires-Dist: black>=22.1.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Provides-Extra: analysis
Requires-Dist: mdtraj>=1.9.7; extra == "analysis"
Requires-Dist: seaborn>=0.11.2; extra == "analysis"
Requires-Dist: pandas>=1.4.0; extra == "analysis"

# ProteinMD

A comprehensive molecular dynamics simulation system for protein behavior in cellular environments.

## Overview

ProteinMD provides a modular framework for simulating proteins in realistic cellular environments, with capabilities for data management, analysis, and visualization. It is designed to be flexible, efficient, and user-friendly, suitable for a wide range of applications in structural biology, drug discovery, and biophysics.

## Features

- **Protein Structure Handling**: Load and manipulate protein structures from PDB files
- **Molecular Dynamics Simulation**: Run efficient MD simulations with multiple force fields and integration algorithms
- **Environmental Factors**: Simulate proteins in various cellular environments (membranes, cytoplasm, etc.)
- **Data Analysis**: Tools for analyzing simulation results, including trajectory analysis and visualization
- **Extensible Design**: Modular architecture that allows for easy extension with new features

## Project Structure

```
proteinMD/
│
├── __init__.py                 # Package initialization
├── analysis/                   # Analysis tools for MD simulations
│   └── __init__.py
├── core/                       # Core simulation functionality
│   ├── __init__.py
│   └── simulation.py           # Main simulation engine
├── database/                   # Database management
│   └── database.py
├── environment/                # Cellular environment modules
│   ├── __init__.py
│   └── environment.py
├── forcefield/                 # Force field implementations
│   ├── __init__.py
│   └── forcefield.py
├── structure/                  # Protein structure handling
│   ├── __init__.py
│   ├── pdb_parser.py           # PDB file parsing
│   └── protein.py              # Protein data structures
├── tests/                      # Test suite
├── utils/                      # Utility functions
└── visualization/              # Visualization tools
    ├── __init__.py
    └── visualization.py
```

## Getting Started

### Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/proteinMD.git
cd proteinMD

# Install dependencies
pip install -r requirements.txt

# Install the package in development mode
pip install -e .
```

### Basic Usage

Here's a simple example of how to use ProteinMD to run a simulation:

```python
from proteinMD.structure.pdb_parser import PDBParser
from proteinMD.core.simulation import MolecularDynamicsSimulation
import numpy as np

# Parse a PDB file
parser = PDBParser()
protein = parser.parse_file('path/to/protein.pdb')

# Extract protein data
positions, masses, charges, atom_ids, chain_ids = protein.get_atoms_array()

# Set up a simulation
sim = MolecularDynamicsSimulation(
    num_particles=len(positions),
    box_dimensions=np.array([10.0, 10.0, 10.0]),  # nm
    temperature=300.0,  # K
    time_step=0.002,  # ps
    boundary_condition='periodic',
    integrator='velocity-verlet',
    thermostat='berendsen'
)

# Add particles to simulation
sim.add_particles(positions=positions, masses=masses, charges=charges)

# Initialize velocities
sim.initialize_velocities()

# Run simulation
sim.run(steps=1000)

# Save trajectory
sim.save_trajectory('trajectory.npz')
```

For more examples, check out the `examples/` directory.

## Requirements

- Python 3.8+
- NumPy
- Matplotlib (for visualization)
- MDTraj (optional, for trajectory analysis)

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## Acknowledgments

- This project was inspired by various molecular dynamics packages like GROMACS, AMBER, and OpenMM
- Thanks to the computational biophysics community for their valuable research and open-source contributions
